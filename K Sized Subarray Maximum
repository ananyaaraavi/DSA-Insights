Given an array arr[] of integers and an integer k, your task is to find the maximum value for each contiguous subarray of size k. The output should be an array of maximum values corresponding to each contiguous subarray.
TC=O(n), SC=O(k)

Optimal solution: Use deque to store the elemtents, iterate through the list, if the front element of deque is not in range of current k, then pop it. 
While the elements in the deque are smaller than the current element pop them, add the current element and push the maximum element(element at the front of deque) into the answer list.


vector<int> maxOfSubarrays(vector<int>& arr, int k) {
        vector<int> ans;
        deque<int> dq;
        for(int i=0;i<arr.size();i++){
            if(!dq.empty() && dq.front()==i-k){
                dq.pop_front();
            }
            while(!dq.empty() && arr[dq.back()]<=arr[i]){
                dq.pop_back();
            }
            dq.push_back(i);
            if(i>=k-1){
                ans.push_back(arr[dq.front()]);
            }
        }
        return ans;
    }
