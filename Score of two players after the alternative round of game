#include <iostream>
#include <vector>

using namespace std;

// Function to solve the problem
void solve(vector<int>& nums)
{
	int n = nums.size();
	int i = 0;
	int j = n - 1;
	bool fromLeft = true;
	bool turn = false;
	int p1 = 0, p2 = 0;

	// Iterate through the array
	while (i <= j) {
		if (fromLeft) {
			// If it's p1's turn
			if (!turn) {
				p1 += nums[i];
			}
			else {
				// If it's p2's turn
				p2 += nums[i];
			}
			// Check if the current element is even, change
			// direction if true
			if ((nums[i] & 1) == 0) {
				fromLeft = !fromLeft;
			}
			i++;
		}
		else {
			// If it's p1's turn
			if (!turn) {
				p1 += nums[j];
			}
			else {
				// If it's p2's turn
				p2 += nums[j];
			}
			// Check if the current element is even, change
			// direction if true
			if ((nums[j] & 1) == 0) {
				fromLeft = !fromLeft;
			}
			j--;
		}
		// Switch turns
		turn = !turn;
	}

	// Output the results
	cout << p1 << " " << p2 << endl;
}

// Main function
int main()
{
	vector<int> n1 = { 1, 2, 4, 3 };

	// Solve and display results for each test case
	solve(n1);

	return 0;
}
