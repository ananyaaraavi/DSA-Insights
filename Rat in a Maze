bool safe(int x,int y,vector<vector<int>> visited,int n,vector<vector<int>> m ){
    if(x>=0 && y>=0 && x<n && y<n && visited[x][y]==0 && m[x][y]==1){
        return true;
    }
    return false;
}

void solve(vector<vector<int>> m,int n, int x,int y,vector<string> &ans,vector<vector<int>> visited,string path){
    if(x==n-1 && y==n-1){
        ans.push_back(path);
        return;
    }
    visited[x][y]=1;
    
    //down
    int newx=x+1;
    int newy=y;
    if(safe(newx,newy,visited,n,m)){
        path.push_back('D');
        solve(m,n,newx,newy,ans,visited,path);
        path.pop_back();
    }
    
    //left
    newx=x;
    newy=y-1;
    if(safe(newx,newy,visited,n,m)){
        path.push_back('L');
        solve(m,n,newx,newy,ans,visited,path);
        path.pop_back();
    }
    
    //right
    newx=x;
    newy=y+1;
    if(safe(newx,newy,visited,n,m)){
        path.push_back('R');
        solve(m,n,newx,newy,ans,visited,path);
        path.pop_back();
    }
    
    //up
    newx=x-1;
    newy=y;
    if(safe(newx,newy,visited,n,m)){
        path.push_back('U');
        solve(m,n,newx,newy,ans,visited,path);
        path.pop_back();
    }
    
    visited[x][y]=0;
}

vector<string> findPath(vector<vector<int>> &m, int n) {
    vector<string> ans;
    string path="";
    
    if(m[0][0]==0 || m[n-1][n-1]==0){
        return ans;
    }
    
    vector<vector<int>> visited=m;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            visited[i][j]=0;
        }
    }
    
    solve(m,n,0,0,ans,visited,path);
    sort(ans.begin(),ans.end());
    return ans;
}
