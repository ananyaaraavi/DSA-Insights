There are n stairs, a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time. Count the number of ways, the person can reach the top (order does matter).

Simple Recursion:
Time Complexity: O(2^n)
Space Complexity: O(n)
int countWays(int n) {
         if(n==0 || n==1 || n==2){
             return n;
         }
        return countWays(n-1)+countWays(n-2);
    }

Dynamic programming:
Time Complexity: O(n)
Space Complexity: O(n)
int countWays(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;

    vector<int> dp(n+1);

    dp[0] = 0;
    dp[1] = 1;
    dp[2] = 2;

    for (int i = 3; i <= n; i++) {
        dp[i] = dp[i-1] + dp[i-2];
    }

    return dp[n];
}
