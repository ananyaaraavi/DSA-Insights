#include<iostream>
using namespace std;
#include<queue>
#include<unordered_map>
#include<set> 

void prepareadjl(unordered_map<int,set<int>> &adjl,vector<vector<int>> &adj){
    for(int i=0;i<adj.size();i++){
        int u= adj[i][0];
        int v= adj[i][1];
        adjl[u].insert(v);
        adjl[v].insert(u);
    }
}

void bfs(unordered_map<int,set<int>> &adjl, unordered_map<int,bool> &visited,vector<int> &ans,int i){
    queue<int> q;
    q.push(i);
    visited[i]=true;
    
    while(!q.empty()){
        int frontnode=q.front();
        q.pop();
        ans.push_back(frontnode);

        for(auto j:adjl[frontnode]){
            if(!visited[j]){
                visited[j]=true;
                q.push(j); 
            }
        }
    }
}

vector<int> bfsTraversal(int n, vector<vector<int>> &adj){   
    unordered_map<int,bool> visited;
    unordered_map<int,set<int>> adjl;
    vector<int> ans;
    prepareadjl(adjl,adj);

    for(int i=0;i<n;i++){
        if(!visited[i]){
            bfs(adjl,visited,ans,i);
        }
    }
    

    return ans;
     
}



