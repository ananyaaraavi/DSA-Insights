void solve(Node *root, vector<int> & ans){
        if(root==NULL){
            return;
        }
        if(root->left==NULL && root->right==NULL){
            ans.push_back(root->data);
            return;
        }
        solve(root->left,ans);
        solve(root->right,ans);
    }
    
    void right(Node *root, vector<int> & ans){
        if((root==NULL) || (root->left==NULL && root->right==NULL)){
            return;
        }
        
        if(root->right){
            right(root->right,ans);
        }
        else{
            right(root->left,ans);
        }
        ans.push_back(root->data); 
    }
    
    void left(Node *root, vector<int> & ans){
        if((root==NULL) || (root->left==NULL && root->right==NULL)){
            return;
        }
        ans.push_back(root->data);
        if(root->left){
            left(root->left,ans);
        }
        else{
            left(root->right,ans);
            }
    }

    vector <int> boundary(Node *root)
    {
        vector<int> ans;
        if(root==NULL){
            return ans;
        }
         if (root->left != nullptr || root->right != nullptr) {
        ans.push_back(root->data);
    }
        //left boundary node only for the left subtree
        if(root->left){
            left(root->left,ans);
        }
        //leaf nodes
        solve(root,ans);
        
        // reverse right boundary node only for right subtree
        if(root->right){
            right(root->right,ans);
        }
        return ans;
    }
