#include <bits/stdc++.h>
using namespace std;

const int MOD = 1e9 + 7;

//used for performing division in modular arithmetic
//fermet's theoram: if m is prime number then modular inverse of a is a^(m-2) mod m
int modInverse(int a, int mod) {
    int result = 1, base = a;
    int exponent = mod - 2;
    
    while (exponent) {
        if (exponent % 2 == 1) {
            result = (1LL * result * base) % mod;
        }
        base = (1LL * base * base) % mod;
        exponent /= 2;
    }
    
    return result;
}

vector<int> productPuzzle(vector<int>& nums, int n) {
    long long prod = 1;
    int count_zero = 0;

    for (int i = 0; i < n; i++) {
        if (nums[i] != 0) {
            prod = (prod * nums[i]) % MOD;
        } else {
            count_zero++;
        }
    }

    vector<int> ans(n, 0);
    if (count_zero > 1) {
        return ans;
    }

    for (int i = 0; i < n; i++) {
        if (nums[i] != 0 && count_zero == 0) {
            ans[i] = (prod * modInverse(nums[i], MOD)) % MOD;
        } else if (nums[i] == 0) {
            ans[i] = prod % MOD;
        }
    }
    
    return ans;
}
