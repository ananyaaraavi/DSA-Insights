node* findMid(node* h){
    node* fast=h->next;
    node* slow=h;
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}

node* merge(node* left,node* right){
    if(left==NULL){
        return right;
    }
    if(right==NULL){
        return left;
    }
    node* l=left;
    node* prev=NULL;
    node* r=right;
    while(l!=NULL && r!=NULL){
        if(l->data>=r->data){           
            node* n=r->next;
            r->next=l;
            if (prev != NULL) {
            prev->next = r;
            }
            else{
                left=r;
            }
            prev=r;
            r=n;
        } else {
            prev = l;
            l = l->next;
        }
    }
        if(r!=NULL){
            prev->next=r;
        }
        return left;
    
}

node* mergeSort(node *head) {
    if(head==NULL || head->next==NULL){
        return head;
    }

    node * mid=findMid(head);
    node* left=head;
    node* right=mid->next;
    mid->next=NULL;

    left=mergeSort(left);
    right=mergeSort(right);
    node* m=merge(left,right);
   
   return m;
}
