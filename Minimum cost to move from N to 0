#include <iostream>
#include <vector>
#include <climits>

const int MOD = 1e9 + 7;

int minCostToMove(const std::vector<int>& A, const std::vector<int>& B) {
    int N = A.size();
    std::vector<long long> dp(N + 1, LLONG_MAX);
    dp[N] = 0;
    
    for (int i = N - 1; i >= 0; --i) {
        for (int j = i + 1; j <= N; ++j) {
            long long cost = dp[j] + (j - i - 1) * B[i] + A[i];
            if (cost < dp[i]) {
                dp[i] = cost;
            }
        }
    }
    
    return dp[0] % MOD;
}

int main() {
    std::vector<int> A = {5, 4, 2, 4, 4, 1}; 
    std::vector<int> B = {1,1, 4, 3, 3, 4};  
    
    std::cout << minCostToMove(A, B) << std::endl;  
    
    return 0;
}
